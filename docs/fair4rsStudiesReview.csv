step,principleNumber,principleTitle,interpretationFAIR4RSv1.0,additionalResourcesFAIR4RSv1.0,interpretationFAIR4RS v0.3,additionalResourcesFAIR4RS,interpretationKatz2021,additionalResourcesKatz2021,interpretationLamprecht2020,additionalResourcesLamprecht2020,interpretationOverall,
Follow standards and best practices during development of the software,I1,"Software reads, writes and exchanges data in a way that meets domain-relevant community standards.","Develop the software such that it reads, writes, and exchanges data in applicable standard formats that are described using controlled vocabulary. A domain-relevant standard is an agreed standard that addresses the needs of a given community (or communities). Where software interacts via APIs, these should be documented so that their capabilities can be inspected and understood by humans and machines, and they should be open APIs where possible.",Examples of community standards for data are curated by the FAIRSharing Registry at  https://fairsharing.org/standards/.,Same as FAIR4RSv1.0,Same as FAIR4RSv1.0,NA,NA,Same as FAIR4RSv1.0,None,"Develop the software such that it reads, writes, and exchanges data in applicable standard formats that are described using controlled vocabulary. Where software interacts via APIs, these should be documented so that their capabilities can be inspected and understood by humans and machines, and they should be open APIs where possible.",
Follow standards and best practices during development of the software,R3,Software meets domain-relevant community standards,"Software, including its documentation and license, should meet domain-relevant community standards and coding practices (for example choice of programming language, standards for testing, usage of file formats, etc).","Refers to https://fairsharing.org/standards/
Examples of community standards might include: BioSchemas from ELIXIR for describing resources in the life sciences and schema.org for general description of resources; Common Workflow Language; and the package managers commonly used by a programming language such as Maven (Java), npm (Javascript), PyPI (Python) and CRAN (R).",Same as FAIR4RSv1.0,Refers to https://fairsharing.org/standards/,"Community standards may include ways of managing and structuring the code, and expectations around the presence and structure of documentation",NA,Same as FAIR4RSv1.0,None,"Software, including its documentation and license, should meet domain-relevant community standards and coding practices (for example choice of programming language, standards for testing, usage of file formats, etc). Community standards may include ways of managing and structuring the code, and expectations around the presence and structure of documentation",
Include metadata files,F2,Software is described with rich metadata,"Provide descriptive metadata following applicable community standards and using controlled vocabularies. The metadata must itself be FAIR. The FAIR4RS principles do not define which standards should be used, as this is better captured in guidance for implementing the principles coming out of each community. R1, R1.1, and R1.2 describe categories of metadata that enable reuse.",None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,"In the context of FAIR, software metadata should at least describe where to find a specific version of the software, how to cite it, who are the authors, what are the inputs and outputs, and what are dependencies. The software’s documentation should provide information on how to install, run and use the software (R1.3)",None,"Provide descriptive metadata following applicable community standards and using controlled vocabularies. The software metadata should at least describe where to find a specific version of the software (F3), how to cite it (R1.2), who are the authors (R.1.2), what are the inputs and outputs (I1), what are dependencies (R2), what is the relation between different versions (F1.2). The metadata itself should be FAIR (F4). The software’s documentation should provide information on how to install, run and use the software.","changed, added depence for F1.2"
Include metadata files,F3,Metadata clearly and explicitly include the identifier of the software they describe,Mention the software’s globally unique and persistent identifier in the metadata and describe how the software can be obtained,None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,Mention the software’s globally unique and persistent identifier in the metadata and describe how the software can be obtained,
Include metadata files,I2,Software includes qualified references to other objects,"Document parameters, and data required to run the software. This should also include reference to non-digital objects that have a virtual presence in digital systems (e.g., samples, reagents, etc.). Use identifiers and/or controlled vocabularies to do so. Possibly include a resolvable reference to further information about the source.",Examples of qualified references might include: software X is implemented using software A (a programming language); software X uses software B (a library/dependency); software X is tested within software C (a platform); software X extends software D.,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0 (I3b),None,Same as FAIR4RSv1.0 (I3) but focused more on dependencies (R2),None,"Document parameters, and data required to run the software. This should also include reference to non-digital objects that have a virtual presence in digital systems (e.g., samples, reagents, etc.). Use identifiers and/or controlled vocabularies to do so. Possibly include a resolvable reference to further information about the source",
Include metadata files,R1,Software is described with a plurality of accurate and relevant attributes,"Where possible, multiple terms for the same, similar or overlapping concepts should be provided.",None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,"Where possible, multiple terms for the same, similar or overlapping concepts should be provided",
Include metadata files,R.1.2,Software is associated with detailed provenance,"Software provenance is a type of metadata that describes why and how the software came to be, as well as who contributed what, when and where. This extends beyond capturing a log of changes to source code as it is developed. Good provenance metadata clarifies the origins and intent behind the development of the software, and establishes authenticity and trust.",None,"Include detailed provenance such as authorship, where the software was developed (location/organization), when (date), how (tools and settings used), and what standards were applied.",None,Same as FAIR4RSv0.3,None,Same as FAIR4RSv0.3 + Include how the software can be cited and how to contribute to it.,None,"Include detailed provenance such as authorship, where the software was developed (location), when (date), how (tools and settings used), what standards were applied, how to cite it, and how to contribute to it.",
Include metadata files,R2,Software includes qualified references to other software,"Include appropriate references to other software/dependencies (requirements, imports, libraries, etc.) which are necessary to compile and run the software using using identifiers.In many programming languages, base methods or functions take a reference to a named entity, possibly in combination with a version number or qualifying domain and resolves this to a source. This principle goes beyond this in calling for qualified references to external dependencies, meaning that the reference itself resolves to the source via the qualifying authority",,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0 (I3),None,"Include appropriate references to other software/dependencies (requirements, imports, libraries, etc.) which are necessary to compile and run the software using using identifiers.",
Choose a license,R1.1,Software is given a clear and accessible license.,A license must be clearly provided. The license should be as open as possible. This license must also be compatible with the requirements of the licenses of the software’s dependencies,"e.g. use the specification published by the SPDX Consortium, 2020",Same as FAIR4RSv1.0,Same as FAIR4RSv1.0,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,A license must be clearly provided. The license should be as open as possible. This license must also be compatible with the requirements of the licenses of the software’s dependencies,
Share software on a repository,F1,Software is assigned a globally unique and persistent identifier,Associate a unique identifier with the software,None,"Same as FAIR4RSv1.0 + Example of extrinsic indentifiers:DOI, RRID. Example of Intrinsic Identifiers:SoftWare Heritage persistent IDentifiers (SWHIDs)",see Figure 1,Use an archive or an institutional repository to keep software and acquire a persistent identifier,https://zenodo.org/record/4312464#.YbEuMdDMKUl,Share on a suitable repository,None,"(Combines F1, F1.1, and F1.2) Associate a unique identifier with each version of a software. This could be achieved by using a suitable repository. What is considered a different version is up to the owner of the software. Relation between the different versions should be documented in the metadata. Different components of the software should be assigned distinct identifiers. See https://doi.org/10.15497/RDA00068 for details on the different granularity levels and suggested identifiers for each. The FAIR4RS principles do not prescribe which granularity levels should be assigned identifiers, as this is likely to be implementation-specific.",Changed just the wording  and the info about the principles combined here
Share software on a repository,F1.1,F1.1. Components of the software representing levels of granularity are assigned distinct identifiers.,"The use of identifiers for more than the software project (often synonymous with “software concept” or “software product”) improves findability by enabling components to be assigned distinct identifiers e.g, a software library, and a function in that library. The relationship between these components is embodied in the associated metadata. These principles do not prescribe which granularity levels should be assigned identifiers, as this is likely to be implementation-specific.",See Figure 1,Same as FAIR4RSv1.0,see Figure 1,Same as FAIR4RSv1.0,None,NA,NA,,
Share software on a repository,F1.2,F1.2. Different versions of the software are assigned distinct identifiers.,"To make different versions of the same software (or component) findable, each version needs to be assigned a different identifier. The relationship between versions is embodied in the associated metadata. What is considered a “version” is defined by the owner of the software: in many cases this will be something that the owner wants to specifically identify and use and/or “release” or “publish” so that others can use and reference/cite. There are existing software engineering practices (e.g., version control, semantic versioning) around the management and versioning of software that may form part of the implementation of these relationships.",None,Same as FAIR4RSv1.0,see Figure 1,Same as FAIR4RSv1.0,None,Assign different identifier to all versions and specific deployments,None,,
Share software on a repository,F4,Metadata are FAIR and are searchable and indexable,"Making the metadata about the software FAIR, including making it readable and discoverable by both humans and machines, improves the findability of software by supporting searching and indexing by others.",None,Same as FAIR4RSv1.0 + Make metadata FAIR by publishing it in a FAIR repository.,None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0 + The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community,None,Make metadata FAIR by publishing it in a FAIR repository. The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community.,
Share software on a repository,A1,Software is retrievable by its identifier using a standardized communications protocol,"Share the software such that it can be obtained using standard communication protocol rather than specialised or proprietary tools or communication methods. For much software, there are commonly used technical communications protocols used to access the software, such as HTTPS.",None,Same as FAIR4RSv1.0,None,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,"(Combines A1, A1.1, and A1.2) Share the software on suitable repository such that it can be obtained using standard communication protocol such as HTTP or SSH. There should be no restriction on implementing the protocol (open), and no fees to implement it (free). The protocol must handle any authentification and authorization procedure for accessing the software when applicable (e.g., payment for using the software, signing a non-disclosure agreement, etc.).","Changed wording, added example about handling payment and the info about the principles combined here"
Share software on a repository,A1.1,"The protocol is open, free, and universally implementable","There should be no restriction on implementing the protocol (open), and not fees to implement it (free).",None,Same as FAIR4RSv1.0,None,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,,
Share software on a repository,A1.2,"The protocol allows for an authentication and authorization procedure, where necessary","The protocol must handle any authentification and authorization procedure when applicable (equirement for payment before use, or restrictions based on the privilege level of the user).",None,"The protocol must handle any authentification and authorization procedure when applicable (e.g., signing a non-disclosure agreement).",None,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,,
Register software on a registry,A2,"Metadata are accessible, even when the software is no longer available","Metadata describing the software must be accessible even when the software is not, e.g. by storing it in the software repositery, registry, or catalog.",None,Same as FAIR4RSv1.0,None,Same as FAIR4RSv1.0,None,Use a repositery that stores metadata separetely from the data,None,Make the metadata describing the software accessible even when the software is not. This could could be achieved by storing it in a suitable repository that keeps the metadata separetely from the data or registering the software in a software registery.,Mentioned registry option
