step,principleNumber,principleTitle,interpretationFAIR4RS,additionalResourcesFAIR4RS,interpretationKatz2021,additionalResourcesKatz2021,interpretationLamprecht2020,additionalResourcesLamprecht2020,interpretationOverall
Step 1: Follow standards and best practices during development of the software,I1,"Software reads, writes and exchanges data in a way that meets domain-relevant community standards.","Develop the software such that it reads, writes, and exchanges data in applicable standard formats that are described using controlled vocabulary.",Examples of community standards for data are curated by the FAIRSharing Registry at  https://fairsharing.org/standards/.,NA,NA,Same as FAIR4RS,None,"Develop the software such that it reads, writes, and exchanges data in applicable standard formats that are described using controlled vocabulary."
Step 1: Follow standards and best practices during development of the software,R3,Software meets domain-relevant community standards,"Software, including its documentation and license, should meet domain-relevant community standards and coding practices (for example choice of programming language, standards for testing, usage of file formats, etc).",Refers to https://fairsharing.org/standards/,"Community standards may include ways of managing and structuring the code, and expectations around the presence and structure of documentation",NA,Same as FAIR4RS,None,"Software, including its documentation and license, should meet domain-relevant community standards and coding practices (for example choice of programming language, standards for testing, usage of file formats, etc). Community standards may include ways of managing and structuring the code, and expectations around the presence and structure of documentation"
Step 3: Include metadata files,F2,Software is described with rich metadata,Provide descriptive metadata following applicable community standards and using controlled vocabularies. The metadata must itself be FAIR.,None,Same as FAIR4RS,None,"In the context of FAIR, software metadata should at least describe where to find a specific version of the software, how to cite it, who are the authors, what are the inputs and outputs, and what are dependencies. The software’s documentation should provide information on how to install, run and use the software (R1.3)",None,"Provide descriptive metadata following applicable community standards and using controlled vocabularies. The software metadata should at least describe where to find a specific version of the software (F3), how to cite it (R1.2), who are the authors (R.1.2), what are the inputs and outputs (I1), and what are dependencies (R2). The metadata itself should be FAIR (F4). The software’s documentation should provide information on how to install, run and use the software."
Step 3: Include metadata files,F3,Metadata clearly and explicitly include the identifier of the software they describe,Mention the software’s globally unique and persistent identifier in the metadata and describe how the software can be obtained,None,Same as FAIR4RS,None,Same as FAIR4RS,None,Mention the software’s globally unique and persistent identifier in the metadata and describe how the software can be obtained
Step 3: Include metadata files,I2,Software includes qualified references to other objects,"Document parameters, and data required to run the software. This should also include reference to non-digital objects that have a virtual presence in digital systems (e.g., samples, reagents, etc.). Use identifiers and/or controlled vocabularies to do so. Possibly include a resolvable reference to further information about the source",None,Same as FAIR4RS (I3b),None,Same as FAIR4RS (I3) but focused more on dependencies (R2),None,"Document parameters, and data required to run the software. This should also include reference to non-digital objects that have a virtual presence in digital systems (e.g., samples, reagents, etc.). Use identifiers and/or controlled vocabularies to do so. Possibly include a resolvable reference to further information about the source"
Step 3: Include metadata files,R1,Software is described with a plurality of accurate and relevant attributes,"Where possible, multiple terms for the same, similar or overlapping concepts should be provided.",None,Same as FAIR4RS,None,Same as FAIR4RS,None,"Where possible, multiple terms for the same, similar or overlapping concepts should be provided"
Step 3: Include metadata files,R.1.2,Software is associated with detailed provenance,"Include detailed provenance such as authorship, where the software was developed (location/organization), when (date), how (tools and settings used), and what standards were applied.",None,Same as FAIR4RS,None,Same as FAIR4RS + Include how the software can be cited and how to contribute to it.,None,"Include detailed provenance such as authorship, where the software was developed (location), when (date), how (tools and settings used), what standards were applied, how to cite it, and how to contribute to it."
Step 3: Include metadata files,R2,Software includes qualified references to other software,"Include appropriate references to other software/dependencies (requirements, imports, libraries, etc.) which are necessary to compile and run the software using using identifiers.",None,Same as FAIR4RS,None,Same as FAIR4RS (I3),None,"Include appropriate references to other software/dependencies (requirements, imports, libraries, etc.) which are necessary to compile and run the software using using identifiers."
Step 4: Choose a license,R1.1,Software must have a clear and accessible license,A license must be clearly provided. The license should be as open as possible. This license must also be compatible with the requirements of the licenses of the software’s dependencies,"e.g. use the specification published by the SPDX Consortium, 2020",Same as FAIR4RS,None,Same as FAIR4RS,None,A license must be clearly provided. The license should be as open as possible. This license must also be compatible with the requirements of the licenses of the software’s dependencies
Step 5: Share software on a repository,F1,Software is assigned a globally unique and persistent identifier,"Associate a unique identifier with the software. Different components of the software must be assigned distinct identifiers and so must different versions of the software. What is considered a “version” is defined by the owner of the software: in most cases this will be something which is “released” or “published” so that others can use it. Example of extrinsic indentifiers:DOI, RRID. Example of Intrinsic Identifiers:SoftWare Heritage persistent IDentifiers (SWHIDs)",see Figure 1,Use an archive or an institutional repository to keep software and acquire a persistent identifier,https://zenodo.org/record/4312464#.YbEuMdDMKUl,Share on a suitable repository,None,Associate a unique identifier with each version of a software. This could be achieved by using a suitable repository. What is considered a different version is up to the owner of the software. Different components of the software must be assigned distinct identifier. See https://zenodo.org/record/4312464#.YbEuMdDMKUl for details on the different granularity levels and suggested identifiers for each.
Step 5: Share software on a repository,F1.1,Different components of the software must be assigned distinct identifiers representing different levels of granularity,"Associate a unique identifier with the software. Different components of the software must be assigned distinct identifiers and so must different versions of the software. What is considered a “version” is defined by the owner of the software: in most cases this will be something which is “released” or “published” so that others can use it. Example of extrinsic indentifiers:DOI, RRID. Example of Intrinsic Identifiers:SoftWare Heritage persistent IDentifiers (SWHIDs)",,,https://zenodo.org/record/4312464#.YbEuMdDMKUl,NA,NA,Associate a unique identifier with each version of a software. This could be achieved by using a suitable repository. What is considered a different version is up to the owner of the software. Different components of the software must be assigned distinct identifier. See https://zenodo.org/record/4312464#.YbEuMdDMKUl for details on the different granularity levels and suggested identifiers for each.
Step 5: Share software on a repository,F1.2,Different versions of the same software must be assigned distinct identifiers,"Associate a unique identifier with the software. Different components of the software must be assigned distinct identifiers and so must different versions of the software. What is considered a “version” is defined by the owner of the software: in most cases this will be something which is “released” or “published” so that others can use it. Example of extrinsic indentifiers:DOI, RRID. Example of Intrinsic Identifiers:SoftWare Heritage persistent IDentifiers (SWHIDs)",,,https://zenodo.org/record/4312464#.YbEuMdDMKUl,Assign different identifier to all versions and specific deployments,None,Associate a unique identifier with each version of a software. This could be achieved by using a suitable repository. What is considered a different version is up to the owner of the software. Different components of the software must be assigned distinct identifier. See https://zenodo.org/record/4312464#.YbEuMdDMKUl for details on the different granularity levels and suggested identifiers for each.
Step 5: Share software on a repository,F4,Metadata are FAIR and are searchable and indexable,Make metadata FAIR by publishing it in a FAIR repository.,None,Same as FAIR4RS,None,Same as FAIR4RS + The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community,None,Make metadata FAIR by publishing it in a FAIR repository. The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community.
Step 5: Share software on a repository,A1,Software is retrievable by its identifier using a standardized communications protocol,"Share the software such that it can be obtained using standard communication protocol rather than specialised or proprietary tools or communication methods. There should be no restriction on implementing the protocol (open), and not fees to implement it (free). The protocol must handle any authentification and authorization procedure when applicable (e.g., signing a non-disclosure agreement).",None,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,"Share the software on suitable repository such that it can be obtained using standard communication protocol such as HTTP or SSH. There should be no restriction on implementing the protocol (open), and no fees to implement it (free). The protocol must handle any authentification and authorization procedure for accessing the software when applicable (e.g., signing a non-disclosure agreement)."
Step 5: Share software on a repository,A1.1,"The protocol is open, free, and universally implementable","Share the software such that it can be obtained using standard communication protocol rather than specialised or proprietary tools or communication methods. There should be no restriction on implementing the protocol (open), and not fees to implement it (free). The protocol must handle any authentification and authorization procedure when applicable (e.g., signing a non-disclosure agreement).",,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,"Share the software on suitable repository such that it can be obtained using standard communication protocol such as HTTP or SSH. There should be no restriction on implementing the protocol (open), and no fees to implement it (free). The protocol must handle any authentification and authorization procedure for accessing the software when applicable (e.g., signing a non-disclosure agreement)."
Step 5: Share software on a repository,A1.2,"The protocol allows for an authentication and authorization procedure, where necessary","Share the software such that it can be obtained using standard communication protocol rather than specialised or proprietary tools or communication methods. There should be no restriction on implementing the protocol (open), and not fees to implement it (free). The protocol must handle any authentification and authorization procedure when applicable (e.g., signing a non-disclosure agreement).",,Same as FAIR4RS,"In general, open source software is retrievable by its identifier using a package manager, version control, or similar programmatic download service.",These can be achieved by sharing the software on a suitable repository that provides access to the software through a standard protocol such as HTTP or SSH.,None,"Share the software on suitable repository such that it can be obtained using standard communication protocol such as HTTP or SSH. There should be no restriction on implementing the protocol (open), and no fees to implement it (free). The protocol must handle any authentification and authorization procedure for accessing the software when applicable (e.g., signing a non-disclosure agreement)."
Step 6: Register software on a registry,A2,"Metadata are accessible, even when the software is no longer available","Metadata describing the software must be accessible even when the software is not, e.g. by storing it in the software repositery.",None,Same as FAIR4RS,None,Use a repositery that stores metadata separetely from the data,None,Make the metadata describing the software accessible even when the software is not. This could could be achieved by storing it in a suitable repository that keeps the metadata separetely from the data.
