,Review group,doiOrLink,firstAuthor,year,title,foundThrough,mentionsFAIR,isRelevant,comments,standardsSuggestion,standardsHelp,bestPracticeSuggestion,bestPracticeHelp,documentationSuggestion,documentationHelp,dataFileSuggestion,dataFileHelp,metadataFilesSuggestion,metadataHelp,licenseSuggestion,licenseHelp,repositorySuggestion,repositoryHelp,registerySuggestion,registeryHelp,FAIRhelp,journalPublicaitonSuggestion,journalPublicationHelp
description,,Identifier of the reviewed resource,Last name of the first author,Year of publication,Title of the resource,How the resource was first found during our review process,Does the resource mention FAIR,Is the resource providing recommendations or actionable items that would make research software FAIR as per https://doi.org/10.15497/RDA00065 ?,Comments from the member(s) who reviewed the resource,Standards suggested to be followed,Resources mentioned to help with standards,Best practices/development standards suggested to follow,Resources mentioned to help with working environment,Documentation or elements of documentation suggested to be provided,Resources mentioned to help with documentation,Data files suggested to be shared,Resources mentioned to help with data files,Metadata files suggested to be included,Resources to help with metadata,License suggested to be used,Resources mentioned to help with license,Repository suggested for sharing research software,Resources mentioned to help with repository selection,Registry suggested to share software research metadata,Resources mentioned to help with registry selection,Resources mentioned to help with making research software FAIR,,
exampleOrOptions,,,,,,,yes/no,yes/no,,,,,,,,,,,,,,,,,,,,
1,1,https://doi.org/10.15497/RDA00065,Chue Hong,2021,FAIR Principles for Research Software (FAIR4RS Principles),,yes,yes,,,"Examples of community standards for data are curated by the
FAIRSharing Registry at https://fairsharing.org/standards/.",,,,,,,"Intrinsic metadata, such as a codemeta.json file in the source code repository, is guaranteed to be controlled by the authors but must be exposed to make the software findable.",,"To support a wide range of reuse scenarios, the license should be as open as possible. Software does not need to be open source licensed to be FAIR: FAIR ? Open, Nevertheless, for software it may be easier to make it FAIR if it is open source.","Software must have a license that clearly describes how it can be used and reused, ideally with conditions that are clear to humans and machines (e.g. using the specification published by the SPDX Consortium, 2020)",,,,,,,
2,1,https://doi.org/10.1016/j.patter.2021.100222,Katz,2020,Taking a fresh look at FAIR for research software,,yes,yes,Summarizes findings of the FAIR4RS working group 1 but do not cover actionable items much,,,,,,,"Source code, Executable (Figure 1)",,,,,,,,,,,,
3,1,https://doi.org/10.3233/DS-190026,Lampretch,2020,Towards FAIR principles for research software,,yes,yes,,,,,,,,,,"There are currently multiple projects working on concrete solutions to add structured metadata annotations to software. Examples include the biotoolsSchema [26], a formalised schema (XSD) used by the bio.tools project [27,28]; the CodeMeta set of terms [29] and Bioschemas Tool profile [30]. The latter two work on top of schema.org, a project aiming to make it easier to add structured markup to web pages, and help search engines to index them. Additionally, some programming languages provide a way to add metadata to software sources, i.e., packages; and often require them to be in a specific format and/or adhere to some guidelines. For instance, R packages must include metadata in the DESCRIPTION file [31] while PEP 566 describes metadata for Python software packages.

Regardless of the metadata description approach used, the use of controlled vocabularies provided by community-approved ontologies is recommended. These will vary dependent on the research domain. The Software Ontology [32] is a resource that can be used to describe software, including types, tasks, versions, provenance and associated data. In the case of life sciences, we advise to use elements from ontologies such as EMBRACE Data and Methods ontology (EDAM) [33]. EDAM provides unambiguously defined terms for describing the types of data and data identifiers, data formats, operations and topics commonly used in bioinformatics. In the geosciences, OntoSoft [34,35] is an ontology designed to facilitate the annotation and publication of software with rich metadata.

This leads us to propose a new FAIR principle I4S for research software: “Software dependencies are documented and mechanisms to access them exist”. The present tendency to package software and its dependencies, either in virtual environments and/or software containers, alleviates the practical concerns for the final user, and simply moves the issue to the generation of those packages. Software deployment systems (PyPI, Conda, CRAN, . . . ) provide solutions for this, and this information can be aggregated by services such as Libraries.io.

Provenance refers to the origin, source and history of software and its metadata. It is recommended to use well-known provenance vocabularies, for instance PROV-O [63], that are FAIR themselves.

Although there is no standard way to cite software currently, the Software Sustainability Institute provides more information and discussions on this topic, and there are guidelines developed for particular domains e.g. earth sciences [65] and mathematics [66], as well as generic guidelines defined by the FORCE11 Software Citation Working Group based on the Software Citation Principles [64].

Initiatives such as CodeMeta [29], Bioschemas [67] and the RDA Research Schemas [68] have made preliminary recommendations for community-agreed software descriptors, but broader work, especially regarding the mapping across different vocabularies, is still needed","A registry of the available controlled vocabularies, data types, formats and schemas that may be used by the software can be found at FAIRsharing.org.","Traditionally, research software has been created and maintained as Free and/or Open Source Software (FOSS). However, while there is a clear overlap between the objectives of FAIR and FOSS with regard to accessibility and reusability, they are not the same (see also [13]). FOSS is mostly concerned with source code being open and licensed under an open license. Open source and permissive licenses are desirable for FAIR software, but although FAIR has its roots in the “FOSS-loving” research software community, they are not a requirement as such. Indeed FAIR does not require data to be open, as clearly certain data sets (e.g., patients’ electronic health records, genomics sequences) require adequate access control (see go-fair FAQ [14])","For example, the Software Package Data Exchange standard [62] facilitates that software licenses becomes machine readable.","For example, Git, currently the most popular technology for software source code version control, works with commit hashes (SHA1), which uniquely point to the specific snapshot of the source code. However, this identifier is not globally resolvable and GitHub (one of the most popular repositories for software source code based on Git technologies) does not make any guarantees about the accessibility or sustainability of code on the platform (persistence), and thereby the software published therein. A common community solution to this problem is depositing software releases from GitHub to Zenodo [24], an open publishing platform funded by the European Commision, and developed and hosted by Centre Européen Recherche Nucléaire (CERN). Zenodo mints DOIs for each released version of the software, and also creates a concept DOI which refers to all versions of a given software [25].

There are chiefly three classes of registries and repositories: (i) general ones such as Zenodo, GitHub itself, and comprehensive software archives as run by the Software Heritage project [36], (ii) language-specific ones such as CRAN, PyPI, and (iii) domain-specific ones such as the bioinformatics-specific BioConductor [37], bio.tools and BioContainers [38] registries, the Astrophysics Source Code Library (ASCL) [39], swMath [40] for mathematical software, CLARIN [41] for digital humanities software source code and the different science gateways based on the HUBzero [42] open source software platform. The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community. For example, most of the Python packages are registered in PyPI and/or one of the Conda [43] channels. R packages go to CRAN, Bioconductor.org and/or source code repositories like GitHub. Linux distributions have their own package managers with software repositories.  

For example, GitHub can host the software source code and can be connected to Zendo, FigShare, bio.tools or FAIRsharing.org [45] for hosting additional copies of the research software metadata. Zenodo promises metadata, and a snapshot of the software release, to be available for the upcoming 20 years, even when the versioned source code on GitHub may not be accessible any more.",,"There are chiefly three classes of registries and repositories: (i) general ones such as Zenodo, GitHub itself, and comprehensive software archives as run by the Software Heritage project [36], (ii) language-specific ones such as CRAN, PyPI, and (iii) domain-specific ones such as the bioinformatics-specific BioConductor [37], bio.tools and BioContainers [38] registries, the Astrophysics Source Code Library (ASCL) [39], swMath [40] for mathematical software, CLARIN [41] for digital humanities software source code and the different science gateways based on the HUBzero [42] open source software platform. The choice of the registry/repository may be influenced by the programming language used and/or the operating system most used by the respective community. For example, most of the Python packages are registered in PyPI and/or one of the Conda [43] channels. R packages go to CRAN, Bioconductor.org and/or source code repositories like GitHub. Linux distributions have their own package managers with software repositories.         

For example, GitHub can host the software source code and can be connected to Zendo, FigShare, bio.tools or FAIRsharing.org [45] for hosting additional copies of the research software metadata. Zenodo promises metadata, and a snapshot of the software release, to be available for the upcoming 20 years, even when the versioned source code on GitHub may not be accessible any more.",,,,
4,2,https://doi.org/10.5281/zenodo.4095092,Gruenpeter,2020,M2.15 Assessment report on 'FAIRness of software,https://doi.org/10.15497/RDA00065,yes,yes,,,,,,,,,,"The CodeMeta initiative created a concept vocabulary that can be used to standardize the exchange of software metadata across repositories and organizations ( Jones et al., 2016 ). It was a result of the FORCE11 Software Citation working group...The vocabulary is built over the schema.org classes SoftwareApplication and SoftwareSourceCode which links the data for semantic web discovery. In addition, the CodeMeta crosswalk table can facilitate translation between ontologies and metadata standards for software, the Rosetta stone of software metadata.",,,"The Software Package Data Exchange (SPDX) Specification is a standard format to communicate about software components, licenses and copyrights22. SPDX is the standard used by many organizations and is adopted in industry and in the FOSS community when agreeing on naming licenses. The Reuse project23, which was started by the Free Software Foundation Europe (FSFE)24 is complementary to SPDX, it facilitates the application of a license to software, with three steps: 1. Choose license 2. Add license 3. Confirm REUSE compliance","With this in mind, assigning persistent identifiers to software is much more tricky than it seems. One can deposit metadata and code into an archiving service (e.g Zenodo, HAL) and get an identifier for this exact instance of the version with the coupled set of metadata. It is evident that the software will evolve and change much faster than the metadata, which won’t be visible on these deposits. Software Heritage provides an archiving service that captures the entire development history and provides a PID which is an intrinsic identifier that can identify each and every element of the source code with integrity (called the SWHID20). SWHIDS can identify all granularity levels from snapshots (GL5) to fragments of code (GL10). In the intrinsic identifier’s case only the content is identified and again the metadata should be registered in a registry, linking the metadata record to the archived content.

Alongside the traditional IR, a new archive has emerged this past few years, the universal source code archive - Software Heritage (SWH). It aims to collect, preserve and share all software source code publicly available ( Di Cosmo & Zacchiroli, 2017 ) . With SWH, it is possible to use the `save code now` functionality to preserve a complete snapshot of a git (or other version control system) repository the same way web pages can be saved with the wayback machine28. Clearly, preserving the software resources for research is a core element to answer many aspects of the FAIR principles for software. Software archiving does not necessarily mean the software must be published, but it should be publicly available in a permanent location. In annex C.1 , we present two case studies for archives: Zenodo and Software heritage.

A few precious examples exists that are discipline specific, like ASCL34 for astrophysics software ( Allen and Scmidt, 2015 ) and swMath35 for mathematical software ( Bönisch et al. 2013, Chrapary et al. 2017 ). Note that there are also package managers that can play the role of a registry without the academic focus, for example CRAN36 for software packages in R or PyPI37 for software packages in Python.",,"With this in mind, assigning persistent identifiers to software is much more tricky than it seems. One can deposit metadata and code into an archiving service (e.g Zenodo, HAL) and get an identifier for this exact instance of the version with the coupled set of metadata. It is evident that the software will evolve and change much faster than the metadata, which won’t be visible on these deposits. Software Heritage provides an archiving service that captures the entire development history and provides a PID which is an intrinsic identifier that can identify each and every element of the source code with integrity (called the SWHID20). SWHIDS can identify all granularity levels from snapshots (GL5) to fragments of code (GL10). In the intrinsic identifier’s case only the content is identified and again the metadata should be registered in a registry, linking the metadata record to the archived content.

A few precious examples exists that are discipline specific, like ASCL34 for astrophysics software ( Allen and Scmidt, 2015 ) and swMath35 for mathematical software ( Bönisch et al. 2013, Chrapary et al. 2017 ). Note that there are also package managers that can play the role of a registry without the academic focus, for example CRAN36 for software packages in R or PyPI37 for software packages in Python.",,,,
5,2,https://op.europa.eu/s/vkhr,European Commission,2018,Turning FAIR into reality,https://doi.org/10.15497/RDA00065,yes ,no,Does not address research software specifically,,,,,,,,,,,,,,,,,,,
6,,https://doi.org/10.5281/zenodo.4635410,Katz,2021,FAIR4RS WG subgroup community consultation March 2021,https://doi.org/10.15497/RDA00065,yes,no,Does not provide guideliens or suggestions for actionable items,,,,,,,,,,,,,,,,,,,
7,2,https://doi.org/10.15497/RDA00053,Research Data Alliance/FORCE11 ,2019,Use Cases and Identifier Schemes for Persistent Software Source Code Identification (V1.0),https://doi.org/10.15497/RDA00065,yes,no,Provides a review of PID but does not make any recommendations,,,,,,,,,,,,,,,,,,,
8,2,https://arxiv.org/abs/2101.10883v4,Katz,2021,A Fresh Look at FAIR for Research Software,https://doi.org/10.1016/j.patter.2021.100222,yes,yes,,,,"A version control system (VCS) may provide detailed provenance for software, but the quality of detail, especially of agents, entities and actions will depend on careful, consistent and considered use of the VCS",,,,"Software is usually written in a human readable form (source code), which will either be executed by an interpreter, or compiled into one or more binary forms suitable for execution within specific hardware and operating system combinations (limiting potential (re)use). We consider making the original human readable form available most harmonious with the FAIR principles, but recognise that for commercial, historical, or sensitivity reasons, the binary or binaries may be the only available form of some software. The binary itself is opaque and may contain bugs and errors. It is impossible to verify its validity and it cannot be modified, for example, to fix bugs. Binaries can be considered black boxes that we can “use” or “reuse” in a research workflow to produce, analyze, or act on data. Source code, on the other hand, can be interrogated, modified, and “reused” in other software or research workflows in a wider range of environments. 

Following the discussion in Section 3.3 , source code is the preferred format for FAIR software, providing a view into the mind of the designer, which is not possible with the binary. With the code, the logic of the software can be “reused” even if the software won't be executed and “used.”",,"The CodeMeta initiative is a subset of the Schema.org vocabulary that was developed to capture properties that aren’t available in schema.org. It is also a research community driven project to capture all software metadata vocabularies, available in the CodeMeta crosswalk table. A possible solution to the gap is to maintain a codemeta.json file inside the software source code repository, which then can be retrieved and indexed in a source code archive. ",The CodeMeta generator1 is a tool that can help researchers create a codemeta.json file.,,,"Fig 2: The museum icon indicates that the software is preserved in a secured location with the purpose of archiving (e.g., Zenodo, Software Heritage, etc.)",,"For instance, software metadata can be captured in domain specific registries like swMath.org or the Astrophysics Source Code Library (ASCL), in general repository solutions like Zenodo, or via a persistent identifier scheme like DOIs.

Gap1 solution: Depositing software in an Institutional Repository (IR) or a Zenodo-like repository (extrinsic metadata)",,,,
9,2,https://doi.org/10.2777/28598,European Commission,2020,Scholarly infrastructures for research software,https://doi.org/10.1016/j.patter.2021.100222,yes,yes,Provides mainly high-level recommendations for supporting FAIR research software but makes some recommendations for actionable items. ,,,,,,,,,all metadata exchange between the different components of the architecture should be based on the CodeMeta vocabulary. EU,,"all metadata about software must be licensed as Creative Commons CC0.

While we subscribe to the general statement that all research output should be “as open as possible, as closed as necessary”, we believe that to fully achieve the potential of Open Science, all research software should be made available under an Open Source license by default, and all deviations from this default practice should be properly motivated. We recommend including this clause in all future research funding programs.",Licence information (software): SPDX license list,"Software Heritage assembles not only research software, but source code in general. It makes use of systematic harvesting, so no explicit deposit is needed, and uniformly represents all VCSs, with provenance and traceability. Intrinsic identifiers for software are used systematically for the over 20 billion software artifacts in the archive, covering all levels of granularity, such as project status, project release, state of source code, and code fragment. 

HAL, on the other hand, is specific to research software and requires deposit. The service has extensive, software-specific, metadata and involves human intervention for careful and manual curation of metadata. Extrinsic identifiers are assigned to the metadata, but intrinsic identifiers are assigned, via transfer to Software Heritage, to the software source code itself. 

Zenodo assembles mainly research software. Like HAL, a deposit is required, however deposit automation is possible for users of GitHub that explicitly enable synchronisation with Zenodo. Metadata can be edited by the owner, and support for more advanced curation processes is planned. Extrinsic identifiers (DOIs) are assigned to both the project as a concept, and the software specific release. Integration with Software Heritage is planned.",,,,,,
10,2,https://doi.org/10.12688/f1000research.11407.1,Jiménez,2017,Four simple recommendations to encourage best practices in research software,https://doi.org/10.3233/DS-190026,yes,yes,"Based on the recommendations for Open Source Software (OSS)  but  demonstrated how they align with FAIR principles. 

Related to this: https://softdev4research.github.io/4OSS-lesson/",,,"Develop source code in a publicly accessible, version controlled repository (e.g., GitHub and Bitbucket) from the beginning of the project.  Opening code and exposing the software development life cycle publicly from day one: • Promotes trust in the software and broader project • Facilitates the discovery of existing software development projects • Provides a historical public record of contributions from the start of the project and helps to track recognition • Encourages contributions from the community • Increases opportunities for collaboration and reuse • Exposes work for community evaluation, suggestions and validation • Increases transparency through community scrutiny • Encourages developers to think about and showcase good coding practices • Facilitates reproducibility of scientific results generated by all prior versions of the software • Encourages developers to provide documentation, including a detailed user manual and clear in-code comments

Docker is an open source project that automates the deployment of software applications in a sandbox (called container).

Containers are a way to package software so that it can be run isolated on an operating system, e.g. Linux. Unlike virtual machines, containers do not bundle a full operating system - only libraries and settings, required to make the software work. This makes containers efficient, lightweight systems and guarantees that software runs reproducibly, regardless of where it is deployed.",,"README - The ‘front page’ of your project

The simplest documentation is the README.md file. For more visibility, a small website can be easily created to host the documentation, for example using the GitHub pages or ReadTheDoc.",,,,"The Dublin Core Metadata Initiative), or “DCMI” It is an open organization supporting innovation in metadata design and best practices across the metadata ecology
CodeMeta Includes tools for preparing metadata in JSON format
Schema.org To describe software applications
SoftwareX Code metadata To publish software with its respective metadata
EDAM Ontology EDAM is a comprehensive ontology of well-established, familiar concepts that are prevalent within bioinformatics and computational biology, including types of data and data identifiers, data formats, operations and topics)
BioSchema.org Bioschemas is a community project built upon schema.org. It provides customisations, a.k.a. profiles, on top of schemas.org types and properties. Profiles include examples together with guidelines regarding cardinality, marginality and reuse of well-known vocabularies in Life Sciences.",,"We advise choosing a OSI-approved Open Source Licence unless your institution or project requires a different licence.

By including an open source license in your repository, it makes easier for other people to contribute. Most of the projects places their license information in a file named LICENSE (LICENSE.txt or LICENSE.md or LICENSE.rst or COPYING, COPYING.txt, COPYING.md, COPYING.rst are also used) in the root of the repository.",Websites like “Choose an open source license” provide guidelines to help users to select an OSI-approved Open Source Licence. Organisations like the OSS Watch also provide advice on how to keep track of the licences of software dependencies. ,,,"Examples of community registries of software metadata are bio. tools (Ison et al., 2016), (Ison et al., 2016) biojs.io (Corpas et al., 2014; Gómez et al., 2013) and Omic Tools (Henry et al., 2014) in the life sciences and DataCite (Brase, n.d.) as a generic metadata registry for software as well as data.

bio.tools This is a portal to bioinformatics resources worldwide, aimed to help bioinformaticians and scientists find, understand, compare and select resources, as well as use and connect them in workflows.
As a platform, it makes use of the EDAM ontology, and therefore provides a standardized vocabulary for providing metadata. Moreover, it includes aspects such as language and platform. However, it does not support filters by language nor does it assign a doi to the software (which is to be expected, as it serves as a registry and not a repository).

OMICTools This is a commercial service providing a registry of tools relevant in life sciences, containing sufficient metadata for connecting different tools in a single pipeline. However, it is not an open registry, i.e. the authors need to contact the development team in order for a tool to be included.

Astrophysics Source Code Library The Astrophysics Source Code Library (ASCL) is a free online registry for source codes of interest to astronomers and astrophysicists and lists codes that have been used in research that has appeared in, or been submitted to, peer-reviewed publications. It is fairly simple compared to other registries, but it focused on a particular domain (astrophysics).

BioCatalogue The BioCatalogue is a curated catalogue of Life Science Web Services. The BioCatalogue was launched in June 2009 at the Intelligent Systems for Molecular Biology Conference. The project is a collaboration between the myGrid project at the University of Manchester led by Carole Goble and the European Bioinformatics Institute led by Rodrigo Lopez. It is funded by the Biotechnology and Biological Sciences Research Council. It contains only web services. The BioCatalogue is based on an open source Ruby on Rails codebase.

Metadata tools from the US Federal Geographic Data Committee This is a complete list of tools for capturing software metadata in the Geographic Data domain.

Zenodo Zenodo is a research data repository. It was created by OpenAIRE and CERN to provide a place for researchers to deposit datasets. It launched in 2013, allowing researchers in any subject area to upload files up to 50 GB. Zenodo has integration with GitHub to make code hosted in GitHub citable. Zenodo is a general-purpose open access repository.",,,,
11,2,https://doi.org/10.7717/peerj-cs.86,Smith,2016,Software citation principles,https://doi.org/10.3233/DS-190026,no,yes,Focuses on principles for citing software. Discusses about existing metadata standards but does not recommend any explicitely,,,,,,,,,,,,,"For software, we recommend the use of DOIs as the unique identifier due to their common usage and acceptance, particularly as they are the standard for other digital products such as publications.

This is currently offered by services such as figshare and Zenodo (GitHub, 2014), which both generate persistent DataCite DOIs for submitted software",https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content,,,,,
12,2,https://doi.org/10.7287/peerj.preprints.2630v1,Katz,2016,"Software vs. data in the
context of citation,",https://doi.org/10.3233/DS-190026,no,no,Discussed differences between software and data,,,,,,,,,,,,,,,,,,,
13,2,https://doi.org/10.1162/dint_a_00033,Goble,2020,FAIR Computational Workflows,https://doi.org/10.3233/DS-190026,yes,no,"This paper focuses on current limitations for making computational workflows FAIR. It concludes that ""FAIR principles for data, and for software, are generally applicable, but need to be extended in order to address the processual nature of workflows""",,,,,,,,,,,,,,,,,,,
14,2,"https://doi.org/10.5281/zenodo.1324296
",Ferguson,2018,D3.1 Survey of Current PID Services Landscape,https://doi.org/10.3233/DS-190026,no,yes,Reviews Persistent Identifiers (PIDs). Includes some sections specifically on software,,,,,,,,,"Another challenge is the variety of metadata standards used in the community. The Codemeta project64 tries to address this challenge by providing a crosswalk table between these metadata standards, and codemeta support is added to an increasing number of services facilitating software citation9.",,,"There are initiatives that maintain databases of Licenses. One example is Software Package Data Exchange (SPDX)73 which aims to standardize the way that license information, including components, license and","Several initiatives currently facilitate software citation. One is the CERN-hosted online repository Zenodo59, which allows source code from the popular software development site GitHub to be preserved and cited through its infrastructure by registering DOIs for research software60. Of the now more than 50k DOIs registered for software, more than 80% were registered via Zenodo61.

DOIs might be the preferred persistent identifier for citing research software in most communities, however there is another highly relevant identifier used to track changes during software code development (versioning): the “commit hash” of the version control system, e.g. git, that is based on Merkle trees. Hashes are derived directly from the software code, and (with some exceptions) globally unique. These hashes are used heavily by source code repositories such as GitHub, and by Software Heritage, an archive for software source code66 that archives GitHub as well as the now defunct source code repositories Google Code and Microsoft CodePlex.",,,,,,
15,2,https://doi.org/10.1093/bib/bbz075,Ison,2019,Community curation of bioinformatics software and data resources,https://doi.org/10.3233/DS-190026,no,no,This paper is about a biomedical software registry (bio.tools) that could help make software FAIR. We would have to see if other studies recommend it.,,,,,,,,,,,,,,,,,,,
16,2,https://doi.org/10.1093/bioinformatics/btx192,Leprevost,2017,BioContainers: An open-source and community-driven framework for software standardization,https://doi.org/10.3233/DS-190026,no,no,This paper is about a tool that could help make software FAIR. We would have to see if other studies recommend it.,,,,,,,,,,,,,,,,,,,
17,2,https://doi.org/10.5281/zenodo.2555498,Martinez,2019,Top 10 FAIR Data & Software Things - Research Software,https://doi.org/10.3233/DS-190026,yes,yes,,,,"make your code modular, have code level documentation, provide tests, follow code standards, use version control, etc","There are several guidelines which you can use to guide you in the process such as the eScience Center Guide, the best practices and the good enough practices. https://guide.esciencecenter.nl/#/. https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745, https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510","List all operations that your software provides, and describe them along with corresponding input and output data types. If possible, use terms from a domain ontology like EDAM.

Your software should include sufficient documentation: instructions on how to install, run and use your software. All dependencies of your software should be clearly stated. Provide sufficient examples on how to execute the different operations your software offers, ideally along with example data.",Write the Docs page explains and gives examples of good documentation: https://www.writethedocs.org/guide/writing/beginners-guide-to-docs/,,,"Codemeta is a set of keywords used to describe software and way to structure them in machine readable way

Edam is an example of an ontology that provides terminology that can be used to describe bioinformatics software.

Read documentation of Citation File Format and create CFF file for your software","For examples of Codemeta used in software packages see: • https://github.com/NLeSC/boatswain/blob/master/codemeta.json • https://github.com/datacite/maremma

https://softdev4research.github.io/4OSS-lesson/05-use-registry/index.html

https://citation-file-format.github.io/cff-initializer-javascript/#/",,"Choose a license website provides a simple guide for picking the right license for your software: https://choosealicense.com/

Follow the 4OSS lesson to learn more about licenses and their implications: https://softdev4research.github.io/4OSS-lesson/03-use-license/index.html","For example, Zenodo provides you with a DOI (Digital Object Identifier) that will be resolvable for at least the next 20 years. Recent initiatives, such as Software Heritage, propose to associate a permalinks as intrinsic SHA1 identifier to software. 

Is it hosted on a reliable platform (long term persistent, such as Zenodo, PyPI, CRAN)?",https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content,Here are some examples of research software registries: * bio.tools * Research Software Directory (check if your institution hosts one) * rOpenSci Project * Zenodo,https://softdev4research.github.io/4OSS-lesson/05-use-registry/index.html,,,
18,2,https://doi.org/10.3389/fninf.2017.00069,Benureau,2018,"Re-run, repeat, reproduce, reuse, replicate: Transforming code into scientific contributions",https://doi.org/10.3233/DS-190026,no,yes,,,,,,A proper documentation on how to install and run the software often makes the difference whether other researchers manage to use it or not,,Code and input data and result data should be available,,,,,,"through a DOI link to a scientific repository such as Figshare, Zenodo5 or a domain specific database, such as ModelDB for computational neuroscience.",,,,,,
19,3,https://www.ouvrirlascience.fr/opportunity-note-encouraging-a-wider-usage-of-software-derived-from-research/,Clément-Fontaine,2019,Opportunity Note: Encouraging a wider usage of software derived from research,https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials,yes,no,"Provides high-level recommendations only

""sustainable and public since the example of Google Code, a free software development platform which closed in 2015, demonstrated that the private sector cannot guarantee long-term sustainability.""

This all requires metadata quality control procedures which are absent in repositories such as FigShare or Zenodo3 but are currently being developed for HAL4.",,,,,,,,,,,,,,,,,,,
20,3,https://doi.org/10.3233/ISU-170824,Mons,2017,"Cloudy, increasingly FAIR; revisiting the FAIR Data guiding principles for the European Open Science Cloud",https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials,yes,no,Discusses FAIR data and not software,,,,,,,,,,,,,,,,,,,
21,3,https://doi.org/10.1515/itit-2019-0040,Hasselbring ,2020,From FAIR research data toward FAIR and open research software,https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials,yes,yes,,,,"GitHub serves for use, reuse, and active involvement of researchers.

Proper interface definitions in modular software architectures are essential for interoperable research software components. Software virtualization techniques such as Docker containers and online services help to support portability, and thus interoperability and reusability across platforms. To achieve this, researchers must be competent and willing to learn to provide their software in executable ways for whatever infrastructure they would like to have impact via reuse through other researchers.

From a software engineering point of view, modular software architectures allow for reusing parts of research software systems

Use software development platforms such as GitHub for code cloning
Provide proper interface definitions in modular software architectures
Use software development platforms such as GitHub for active involvement
Build modular software architectures to allow for reusing parts of research software
Use domain-specific languages for comprehensibility and modularity of research software",,,,,,"However, there exists guidelines for software citation and identification [38], and already some metadata standards for software citation exist [26]: – The Citation File Format (CFF) is a human- and machine-readable file format in YAML which provides citation metadata for software [11]. – A CodeMeta instance file describes the metadata associated with a software object using JSON’s linked data (JSON-LD) notation [3].",,"The FAIR data principles do not require openness, but research software should be open source software. Established open source software licenses provide sufficient licensing options, such that it should be the rare exception to keep research software closed.",,"This may, for instance be achieved via taking a snapshot from GitHub to be archived on Zenodo.org [16]: – GitHub serves for use, reuse, and active involvement of researchers. – Zenodo serves for archival and reproducibility of published research results.

The Software Heritage archive could be another option for software preservation [9]


Use repositories such as Zenodo to access archived software versions",https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content,,,,,
22,3,https://doi.org/10.1162/dint_a_00026,Weigel,2020,Making Data and Workflows Findable for Machines,https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials,yes,no,Does not focus on research software,,,,,,,,,,,,,,,,,,,
23,3,https://hal.archives-ouvertes.fr/hal-02475835,Di Cosmo,2020,Curated Archiving of Research Software Artifacts: lessons learned from the French open archive,https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials,no,yes,"SWH is used as for sharing in the proposed project but it is innitiated by the SWH team so we do not include it under recommended repository

""Today, there exist platforms that offer source code deposit, such as Zenodo and Figshare, but do not have any pre-submission checks for the self-archived content. HAL chose to follow ArXiv’s example10 and implement a sophisticated moderation workflow in order to ensure that quality metadata is attached to every deposit into the platform.""

""We argue that this requires human intervention, and that it is not enough to just share software on code hosting platforms like GitHub, or self-archive it on repositories like Figshare or Zenodo.""",,,,,"README - Elements that we require and recommend to be included in the README file were taken from the ""Best Practices on How to Release Software"" from (Raymond E. S., 2000) ?MUST include: •name of the software/project •a brief description of the project ?SHOULD include: •project website or documentation pointer •authors/credits list (if not in AUTHORS file) •license (if not in LICENSE file) •Contact and support ?CAN include: •list of features •developer's build environment •build, installation, requirements - how to run the code •usage - how to use the source code •recent project news •visual",,,,"We researched the software vocabulary landscape for a vocabulary adapted to scientific software, and we found that the CodeMeta vocabulary was a perfect fit. A refinement of the schema.org classes SoftwareApplication and SoftwareSourceCode, it provides a convenient bridge with linked data and the semantic web. In addition the core metadata for software is compliant with existing standards like TEI and Dublin Core.",,LICENSE (Preferably from the SPDX referential catalog13),,,,,,,,
24,3,https://doi.org/10.12688/f1000research.23224.2,Anzt,2021,"An Environment for Sustainable Research Software in Germany and beyond: Current State, Open Challenges, and Call for Action",https://doi.org/10.5281/zenodo.4555865,yes,yes,"""Research software contributors should have an ORCID iD to be uniquely identifiable and referable""",,,One solution to keep the software in an executable state by preserving its context and runtime environment is to use containers such as Docker.,,,"Besides the aforementioned metadata standards, it is advisable to document source code, e.g. using MarkDown (with Doxygen tooling)",,,"""Discovery requires publication in a globally accessible location with appropriate metadata, e.g. Citation File Format (CFF)85 and CodeMeta.""",,"We also argue that truly sustainable research software should ideally be published under a Free/Libre Open Source Software (FLOSS) license, and follow an open development model

The use of an FSF- or OSI-approved FLOSS license for example would enable a truly free model and also reduce legal issues.

If licenses such as Apache or MIT are applied, the research institutions may later still commercialize the software if appropriate. Such open source licensing is also beneficial for start-ups that intend to provide professional services for the software.",,"We consider GitLab or GitHub as collaborative working environments and repositories like Zenodo appropriate publication platforms, because the latter mint DOIs, allow versioning and are publicly funded for long-term access. GitHub, Figshare, and Mendeley Data are examples of commercial enterprises with business cases in the background, which leverage research results

Another solution to discovery are (mostly) disciplinary software indices like swMATH or the Astronomy Source Code Library as well as language focused systems like CRAN for R.

Furthermore, its integration with collaborative software development environments such as GitLab or GitHub and with publication repositories is needed to facilitate archiving of referenced software versions based on sustainable frameworks (e.g. Invenio for GitHub to Zenodo integration).",Invenio for GitHub to Zenodo integration,,,,,
25,3,https://doi.org/10.1016/j.cels.2018.03.014,Gruning,2018,Practical Computational Reproducibility in the Life Sciences,https://doi.org/10.5281/zenodo.4555865,no,yes,Best practices more oriented for analysis workflow,,,,,,,,,,,,,,,,,,,
26,3,http://arxiv.org/abs/1908.05986,Hasselbring,2019,FAIR and Open Computer Science Research Software,https://doi.org/10.5281/zenodo.4555865,yes,no,Preprint of previsouly listed paper https://doi.org/10.1515/itit-2019-0040,,,,,,,,,,,,,,,,,,,
27,3,https://doi.org/10.12688/f1000research.26932.2,Katz,2021,The Importance of Software Citation,https://doi.org/10.5281/zenodo.4555865,no,yes,,,,,,,,,,,,"In particular, guidance should explicitly mention that Creative Commons licenses (including CC-BY) must not be used for software, and an open source license should be used","choose a license for their software, perhaps by linking to the information at choosealicense.org",,,,,,,
28,3,https://doi.org/10.1055/s-0040-1713684,Sinaci,2020,From Raw Data to FAIR Data: The FAIRification Workflow for Health Research,https://doi.org/10.5281/zenodo.4555865,yes,no,Focused on health data not research software,,,,,,,,,,,,,,,,,,,
29,3,"https://doi.org/10.5281/zenodo.4310217
",Martinez-Ortiz,2020,"Five recommendations for ""FAIR software""",https://zenodo.org/communities/fair4rs,yes,yes,"Also relate to https://doi.org/10.7490/f1000research.1118518.1

https://fair-software.nl/",,,"1. Use a publicly accessible repository with version control - Git is the version control system which is most feature rich, most modern and most popular by a good margin, and we heartily recommend you use it for all you version control needs To get the best out of Git, use it in combination with GitHub com, Bitbucket org, or GitLab com",https://software.ac.uk/choosing-repository-your-software-project,"5. Use a software quality checklist... We recommend that you include the checklist as part of the README, for example as a badge or by including the checklist as a Markdown table.

One of our favorite checklists that meets these criteria is the Badge Program developed by the Core Infrastructures Initiative, but there are many other checklists to choose from.

Here is a list of some candidates: 
- Core Infrastructures Initiative ( interactive) 
- DLR Class 1 Class 2 Class 3 MarkDown 
- SSI's software evaluation checklist (Google form) 
- CLARIAH checklist (PDF page 38 42 EURISE 
- MarkDown Use a software quality checklist",,,,CodeMeta and the Citation File Format were specifically designed to enable citation of software and will likely meet your needs,Initialize your CITATION cff files here https://citation-file-format.github.io/cff-initializer-javascript/#/,"Some of our favorite licenses are the Apache 2 0 and MIT licenses These permissive licenses have very few restrictions, allowing others to easily reuse your work","We recommend you use choosealicense com to find out which license is best for your purposes If you just want to check what is and what is not allowed under a given license, visit tldrlegal com to find out",Archiving services: Zenodo FigShare Software Heritage Archive,,,https://github.com/NLeSC/awesome-research-software-registries,,,
30,4,https://dx.doi.org/10.12688%2Ff1000research.16015.1,Navale,2018,Long-term preservation of biomedical research data,PubMed,yes,no,Does not discuss FAIR software,,,,,,,,,,,,,,,,,,,
31,4,https://doi.org/10.1371/journal.pone.0213013,Madduri,2019,Reproducible big data science: A case study in continuous FAIRness,PubMed,yes,yes,Describes a workflow developed by the authors for processing big data and explains how it was made FAIR. Focuses more on the overall workflow that includes data and code rather than on making software FAIR,,,"Source code allows a reader to examine application logic [31, 32], but may 
not run on a new platform. Container technologies such as Docker [11] and Singularity [33] can be used to capture a complete software stack in a form that can be executed on many platforms",,,,,,,,,,,,,,,,
32,4,https://doi.org/10.1021/acs.jcim.0c00018,Gygli,2020,Simulation Foundry: Automated and F.A.I.R. Molecular Modeling,PubMed,yes,no,"Simulation Foundry (SF), an open platform to guarantee the repeatability of molecular
dynamics simulations (MDS). It achieves that by making simulation data and metadata FAIR. It is not focused on making research software FAIR but rather the data transitioning through it.",,,,,,,,,,,,,,,,,,,
33,4,https://dx.doi.org/10.12688%2Fwellcomeopenres.16378.2,Austin,2020,Fostering global data sharing: highlighting the recommendations of the Research Data Alliance COVID-19 working group,PubMed,yes,no,"There is a section on high-level recommendation for making software FAIR along with references, but no actionable items are directly mentioned.",,,,,,,,,,,,,,,,,,,
34,5,https://doi.org/10.12688/f1000research.10750.2,Silva,2017,General guidelines for biomedical software development,Author knowledge,,,Useful for best practices,,,"Several version control systems (VCS) can manage code development, such as Git or Mercurial. Github or Bitbucket are some examples of ready-to-use SCM.

Last but not least, inline source code documentation is very important to define and explain the different parts of the source code, making it easier for the programmers when they need to add extra features or fix bugs. 

For example, it is possible to use software containers like Docker5 to distribute complex software and help deploy it, ensuring the whole community can run the software25–27.",,,"For general documentation, Markdown or Sphinx3 (also used for Python) can be used. For Java language, there is Javadoc, while other languages have their own documentation strategy that can be followed.",,,,,"There are different types of open source licenses, that come with different conditions and restrictions. We will list the most commonly used open source licenses:

• BSD License – It is the most permissive FOSS license. Users that re-use the code can do whatever they want, except in the case of redistributing source or binary, where they must always retain the copyright notice.

• Apache Public License 2.0 – This license is very permissive. It allows the licensed source code to be used in open-source and also in closed-source software.

• GNU GPL – This license is restrictive. The users of the licensed system are free to use the licensed system without any usage restrictions; analyze it and use the results of the analysis (the source code must be provided and cannot be hidden); redistribute unchanged copies of the licensed system, and also modify and redistribute modified copies of the licensed system

• GNU LGPL – It is trade-off between the restricted GNU GPL and the permissive BSD. LGPL assumes that a library licensed under LGPL can be used in a non-GPL application. All the changes applied to the LGPL library must remain under LGPL. It assumes that all copyrights reversed on source code files, and not on the whole program.","The license should be stated clearly on the project’s front page and in the root of the source code. The full license text can be included here in a file called COPYING or LICENSE, following the standard format. The copyrights should be assigned together with the license. The common nomenclature adds the year and the organization owning the copyright: Copyright (C) <year><name of organization>. The year specification may be a range, such as 2014–2016, to restrict the copyright to a period of time28. This line should be included in the headers of all source code files, together with a short license.",,,,,,,
35,5,https://datascience.nih.gov/tools-and-analytics/best-practices-for-sharing-research-software-faq,NIH,2021,Best Practices for Sharing Research Software,Author knowledge,yes,yes,,,,"researchers are encouraged to select a repository that is appropriate for the software and code generated from the research project that has long-term sustainability via social coding repositories that are open, revision-control, source-code management systems such as GitHub(link is external), GitLab(link is external), or Bitbucket(link is external).

It is encouraged to check software for vulnerabilities prior to sharing it. The SANS institute has published a list of the top 25 software errors. These lists could help guide you in review of the software source code. See http://www.sans.org/top25-software-errors/(link is external)

There are no NIH-wide standard requirements related to quality of research software. However, NIH encourages researchers to adopt best practices of research software engineering while developing software funded by NIH with the aim of enhancing the sustainability of the software. Consider checklists such as those developed by:
- The Linux Foundation’s Core Infrastructure Initiative(link is external)
- The Software Sustainability Institute
",,"Documenting the design and purpose of your code provides others with a better understanding of your code. Providing compute platform-specific details for how your code can be installed and used would allow other programmers to test and debug the code appropriately for reproducible usage.

Better Scientific Software(link is external) is one of many information sources on that provides guidance on code documentation practices.",https://bssw.io/items?topic=documentation,"Software may be shared in multiple ways:

as source code or the executable version
as code libraries published to general or specific package distribution channels
as workflows or containers
as services and APIs",,"Consider strategies that allow your software to be citable...adding a citation.cff(link is external) file to your GitHub repository

Metadata to consider include, but not limited to are:

# Title: [Name of software]

# Description: [Describe the purpose of the software]

# Persistent Identifier: [A unique persistent identified (PID) such as a digital object identifier (DOI) or accession number supports data discovery, reporting and assessment.]

# Software Language and Version/Standard: [For example, C++ ISO/IEC 14882:2020] 

# Author(s): [Names of software developers and contributors]

# Grant Number: [In this format R01GM987654]

# Publications: [Persistent identifiers and citations for publications by your team related to this software or code.]",https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files,"Follow guidance provided by your funder. If no specific guidance is provided, NIH suggests using one of the licenses approved by the Open Source Initiative(link is external) (OSI). An OSI license makes using and contributing to research software easier because these licenses are well known and understood.",https://opensource.org/licenses,"Consider strategies that allow your software to be citable such as  Zenodo’s  ability to  assign unique Digital Object Identifiers (DOIs)(link is external) (one type of persistent identifiers) for source code released in GitHub

Specialized software packages may also be distributed via package management and library utilities such as Conda(link is external) or Bioconductor(link is external). Containers and workflows may be shared through repositories such as Dockstore(link is external)",,,,,,
36,5,https://doi.org/10.3389/fgene.2014.00199,Leprevost,2014,On best practices in the development of bioinformatics software,https://doi.org/10.1093/bioinformatics/btx192,no,yes,Refer for best practices,,,"Solutions such as Git allow the simultaneous collaboration with several projects while greatly simplifying each maintainer’s tasks of tracking and resolving bugs, handling feature requests, and launching upgrades (Torvalds, 2014a). This also helps to promote the collaborative aspect of software development since anyone can join an ongoing project and provide patches.

A test library is a series of scripts designed to test a given piece of software. It is meant to aid in quickly determining whether the software’s main modules are working as expected. Ideally, all functions of the code should be thus tested, but sometimes this is not possible because of the size or complexity of the project. What is fundamental to test, though, is whether the main logic and operations are working correctly whatever the running environment happens to be. Normally a test library is shipped together with the software and the tests are executed before installation to certify that the main features are working on the machine at hand. Another important aspect of any scientific software is that sample data be provided along with it, in a manner similar to that in which supplementary files are provided together with a manuscript. Through “real-world” examples, users can verify what to expect of the various analyses",,"Software documentation can be categorized into two groups, one targeted at software developers, the other at the end users. The former is usually found in the source code, or is linked to it, and is used to explain the particularities of the code itself, which is important especially for software updating and customization. The latter typically uses nontechnical language and is aimed at aiding the user in the process of software installation and execution. Without proper code documentation the process of resolving a bug or including new developers in the team becomes a very complicated task. Users likewise need to have access to the documentation explaining its usage, which must include all directives for installation under different operating systems (when such is the case) and for the handling of parameters and input data prior to a run. It is also important to note that we need proper documentation for biologists, as they will be the ones installing and using the programs. With easy-to-follow guidelines and instructions for non-programmers, it is possible to improve software usability.",," It is our opinion that reviewing the source code from submitted papers should be possible if desired, though publishers would obviously have to search for even more specialized reviewers for the task. ",,,,"There are several advantages to making a software project open source (Perez-Riverol et al., 2014). ",,"A topic that we should address as a community is the possibility of indexing software with a solution like the well-known DOI system. An example of such an initiative is the combined work of the Mozilla Science Lab (Mozilla Foundation, 2014), GitHub (GitHub, 2014), and Figshare (Figshare, 2014). ",https://mozillascience.github.io/code-research-object/,,,,,
37,5,"https://doi.org/10.5281/zenodo.3479199
",Chue Hong,2019,Software Citation Checklist for Authors,https://doi.org/10.12688/f1000research.26932.2,no,no,Not relevant,,,,,,,,,,,,,,,,,,,
38,5,https://libguides.mit.edu/software, MIT Libraries,,Citing & publishing software: Publishing research software,Author knowledge,no,yes,,,,"Major source code repositories, such as Github, Codeplex, BitBucket, or Sourceforge publishcode, and provide many features to support ongoing development.",,,,,,"The FORCE11 software citation principles include the recommendation that software packagesinclude a CITATION file along with other README files that documents exactly how the authorsof the software would like to be cited by others andmay vary depending on the language (for instance, R supports a citation() function as well asCITATION files).",,,,"Disciplinary software repository such as The Comprehensive R Archive Network (CRAN) or NanoHub are often heavily used among specific research communities to locate software thatcan be applied in research. General subject/replication archives such as Dataverse, Zenodo, or FigShare publish individualversions of software and data in support of replication and reuse.","https://www.re3data.org/

https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content

http://mozillascience.github.io/code-research-object/",,,,"A software journal, such as PLOS One or The Journal of Open Research Software, allowssubmissions that ""allow for submissions entirely focused on research software"", enablingdescription and credit for research software ( Force11 software citation principles ). Like datajournals, which focus on publishing papers that describe data sets, these journals supportpublishing papers that explain and describe research software packages. Publishing a softwarepaper both serves as a way to extensively document the code, and to get publication credit foryour work.",https://www.software.ac.uk/which-journals-should-i-publish-my-software
39,5,https://coderefinery.github.io/reproducible-research/,coderefinery,,Reproducible research,Author knowledge,yes,yes,,,,"All code is version controlled 

Recording dependencies, e.g., requirements.txt

A container provides operating-system-level virtualization, sharing the host system’s kernel with other containers.

Popular container implementations are Docker and Singularity.","https://coderefinery.github.io/reproducible-research/dependencies/

https://coderefinery.github.io/reproducible-research/organizing-projects/ 

https://coderefinery.github.io/reproducible-research/environments/",Add a README file to describe the project and instructions on reproducing the results,,,,,,,,"Zenodo: A general-purpose open access repository created by OpenAIRE and CERN. Integration with GitHub, allows researchers to upload files up to 50 GB.","To find a research data repository for your data, you can search on the
Registry of Research Data Repositories (re3data) (https://www.re3data.org/)
platform and filter by country, content type, discipline, etc.",,,,,
40,5,https://dx.doi.org/10.1371%2Fjournal.pcbi.1006561,,,Ten simple rules for documenting scientific software,Author knowledge,no,yes,Whole paper is a best practice guide for documentation,,,Rule 1: Write comments as you code,,"Rule 4: Include a README file with basic information A good rule of thumb is to assume that the information contained within the README will be the only documentation your users read. For this reason, your README should include how to install and configure your software, where to find its full documentation, under what license it’s released, how to test it to ensure functionality, and acknowledgments. Furthermore, you should include your quickstart guide (as introduced in Rule 3) in your README

Rule 6: Version control your documentation A previous Ten Simple Rules article has described the virtues of using Git for your code [1]. Because your documentation is such an integral part of your code, it must be version controlled as well.

Software such as Sphinx (sphinx-doc.org), perldoc, Javadoc, and Roxygen (https://github.com/klutometis/roxygen) for R can generate documentation and even read your comments and use those to generate detailed API documentation. ","As an example of a bioinformatics library that is doing a particularly good job at version controlling their documentation, look at khmer, which has a thorough changelog containing new features, fixed bugs (separated by whether they are relevant to users or developers), known issues, and a list of the contributors to the release [9] 

The best type of documentation is documentation that writes itself. Although no software package can do all your documentation for you (yet), there are tools that can do much of the heavy lifting, such as making a website, keeping it in sync with your code, and rendering it to a portable document file (PDF). Software such as Sphinx (sphinx-doc.org), perldoc, Javadoc, and Roxygen (https://github.com/klutometis/roxygen) for R can generate documentation and even read your comments and use those to generate detailed API documentation",,,"... as well as using a “CITATION” file in citation file format (CFF) format, which is a human- and machine-readable file format designed for specifying citation information for scientific software [10].",,,,,,,,,,
41,5,https://doi.org/10.1371/journal.pcbi.1005510,Wilson,2017,"
Good enough practices in scientific computing",Author knowledge,no,yes,"""This paper focuses on these first accessible skills and perspectives—the ""good enough"" practices—for scientific computing: a minimum set of tools and techniques that we believe every researcher can and should consider adopting."" ",,,"The whole paper provides best practices.

Place a brief explanatory comment at the start of every program

Provide a simple example or test data set

Use a version control system (5h) to manage changes to a project. It's hard to know what version control tool is most widely used in research today, but the one that's most talked about is undoubtedly Git. This is largely because of GitHub, a popular hosting site that combines the technical infrastructure for collaboration via Git with a modern web interface. GitHub is free for public and open source projects and for users in academia and nonprofits. GitLab is a well-regarded alternative that some prefer, because the GitLab platform itself is free and open source. Bitbucket provides free hosting for both Git and Mercurial repositories but does not have nearly as many scientific users.

Make dependencies and requirements explicit (2g). This is usually done on a per-project rather than per-program basis, i.e., by adding a file called something like requirements.txt to the root directory of the project or by adding a ""Getting Started"" section to the README file.",,"Create an overview of your project (3a). Have a short file in the project's home directory that explains the purpose of the project. This file (generally called README, README.txt, or something similar) should contain the project's title, a brief description, up-to-date contact information, and an example or 2 of how to run various cleaning or analysis tasks. ",,,,"Make the project citable (3e) by including a CITATION file in the project's home directory that describes how to cite this project as a whole and where to find (and how to cite) any data sets, code, figures, and other artifacts that have their own DOIs. ","The example below shows the CITATION file for the Ecodata Retriever (https://github.com/weecology/retriever); for an example of a more detailed CITATION file, see the one for the khmer project (https://github.com/dib-lab/khmer).","For software, we recommend a permissive open source license such as the MIT, BSD, or Apache license

We recommend permissive software licenses rather than the GNU General Public License (GPL) because it is easier to integrate permissively licensed software into other projects; see chapter 3 in [17]. 

Have a LICENSE file in the project's home directory that clearly states what license(s) apply to the project's software, data, and manuscripts.",,"Submit code to a reputable DOI-issuing repository (2j) upon submission of paper, just as you do with data. Your software is as much a product of your research as your papers and should be as easy for people to credit. DOIs for software are provided by Figshare and Zenodo. Zenodo integrates directly with GitHub.",,,,,,
42,5,https://doi.org/10.1371/journal.pbio.1001745,Wilson,2014,Best Practices for Scientific Computing,,no,no,Not really related to softare reuse. Could be mentioned for best practices,,,,,,,,,,,,,,,,,,,
43,5,"https://doi.org/10.5281/zenodo.1327329
",Jackson,2018,Software Deposit: Where to deposit software,Author knowledge,no,yes,,,,,,,,,,,,,,"Repository hosting services: services such as GitHub 3, BitBucket 4, GitLab 5, CCPForge 6, or Microsoft Visual Studio Team Services 7 that host source code repositories are not well suited for archiving software 8. They don't create unique persistent digital identifiers for your repositories, instead you need to use URLs. Your repositories could later be deleted by yourself, breaking links to these URLs, or the repository hosting service may go out of business.

Institutional digital repositories are provided by institutions for the deposit of research objects, including software, that are created by their staff, typically to showcase their research. Even if you leave the institution, your research will remain in the repository. Examples which support software deposits include the University of Edinburgh DataShare 11, UCL Discovery 12 and the University of Sheffield figshare 13 (an example of an institution-specific deployment of the figshare digital repository platform). Funder- or publisher- mandated or recommended digital repositories are those that funders or publishers recommend, or require you to use. For example, Wellcome Open Research require that software written by a paper's authors be deposited and recommend the use of Zenodo for archived software 14, so its title, digital object identifier (DOI) 15 and licence can be cited. Springer Nature's BioMed Central 16 series of journals, requires both a link to a live version of the software (e.g. on GitHub) but also to an archived version with a DOI, for which Zenodo is recommended 17. Community recommended digital repositories are those that may be recommended for, or popular within, a specific research community. General purpose or open-to-all digital repositories are those that are available for use by any researchers in any community. The two most well-known are Zenodo 18 and figshare 19.

you may also want to consider Software Heritage 20, an international initiative to provide a universal archive and reference system for all software. Software can be explicitly deposited into the Software Heritage archive 21 via the Hal-Inria digital repository 22 which is open to use by all researchers.","It is these limitations that motivated the development of tools such as the figshare-GitHub integration 9 and Zenodo-GitHub integration 10 that support the automated deposit of software within repository hosting services into digital repositories.

re3data.org, https://www.re3data.org/is a global registry of research data repositories. It supports searching for digital repositories by country, subject and content types (which includes various types of data, software applications and source code).",,,,,
44,5,"https://doi.org/10.5281/zenodo.1327327
",Jackson,2018,Software Deposit: How to deposit software,Author knowledge,no,no,"Doesn't provide anymore recommendation than the sister publication  https://doi.org/10.5281/zenodo.1327329
",,,,,,,,,,,,,,,,,,,
45,5,https://doi.org/10.15497/rda00052,RDA COVID-19 Working Group,2020,RDA COVID-19 Recommendations and Guidelines on Data Sharing,https://dx.doi.org/10.12688%2Fwellcomeopenres.16378.2,yes,yes,"""Examples: There are various initiatives that link community members with specific digital skills to projects needing additional support, including Open Source Software helpdesk for COVID-19 (Caswell et al., 2020) and COVID-19 Cognitive City (Grape, 2020). Other initiatives aim to increase skills for engaging with software and code, such as the Carpentries (Carpentries, 2020), USA’s NIH events (NIH, 2020d); and the Galaxy Community and ELIXIR’s webinar series (ELIXIR, 2020).""",,,"The key point here is to ensure that the source code itself is shared and freely available (see information about licences below), through a platform that supports access to it and allows you to effectively track development with versioning (e.g. code repositories such as GitHub (GitHub Inc., 2020), Bitbucket (Atlassian, 2020), GitLab (GitLab, 2020), etc.).",,(Re)using code/software requires knowledge of two main aspects at minimum: environment and expected input/output.,"Resource: Ten simple rules for documenting scientific software (Lee, 2018).",,,,,"Policymakers should enact policies that encourage software to be available under an open source software licence, or at least require the software to be accessible","Resource: Choose an Open Source Licence (Choose a licence, 2020).","Such repositories include Zenodo (CERN, 2020) and Figshare (FigShare, 2020). There are communities of practice that encourage deposition of software (e.g. analysis scripts) and data in one submission. In those circumstances the selected data repository (DataCite, 2020) should provide a PID for the collection.",,,,,,
,,,,,,,,,watch this,,,,,,,,,,,,,,,,,,,
